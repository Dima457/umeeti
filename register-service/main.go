package main

import(
    "context"
    "fmt"
    "log"
    "net/http"
    "os"
    "regexp"
    "strings"

    "github.com/gin-gonic/gin"
    "github.com/jackc/pgx/v5/pgxpool"
    "github.com/joho/godotenv"
    "golang.org/x/crypto/bcrypt"
)

//!  –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø: –ü—É—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î (–≤–∏–¥–Ω–∞ –≤–æ –≤—Å–µ–º package)
var db *pgxpool.Pool

//! STRUCT: –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
type RegisterRequest struct {
    Phone           string `json:"phone" binding:"required"`           //!  –¢–µ–ª–µ—Ñ–æ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    Email           string `json:"email" binding:"required,email"`     //!  Email (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π + –≤–∞–ª–∏–¥–∞—Ü–∏—è)
    FullName        string `json:"full_name" binding:"required"`       //!  –ü–æ–ª–Ω–æ–µ –∏–º—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    Username        string `json:"username" binding:"required"`        //!  –Æ–∑–µ—Ä–Ω–µ–π–º (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    Password        string `json:"password" binding:"required,min=6"`  //!  –ü–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤)
    PasswordConfirm string `json:"password_confirm" binding:"required"`//!  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
}

//! STRUCT: –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
type UserResponse struct {
    ID       int    `json:"id"`
    Phone    string `json:"phone"`
    Email    string `json:"email"`
    Username string `json:"username"`
    FullName string `json:"full_name"`
}

func main(){
    //! –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø –∏–∑ .env —Ñ–∞–π–ª–∞
    godotenv.Load()
    
    //!  –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•
    connStr := fmt.Sprintf("postgres://%s:%s@%s:%s/%s",
        os.Getenv("DB_USER"),      //!  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î
        os.Getenv("DB_PASSWORD"),  //!  –ü–∞—Ä–æ–ª—å –ë–î  
        os.Getenv("DB_HOST"),      //!   –•–æ—Å—Ç –ë–î
        os.Getenv("DB_PORT"),      //!  –ü–æ—Ä—Ç –ë–î
        os.Getenv("DB_NAME"),      //!  –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    )
    
    var err error
    //!  –°–û–ó–î–ê–ù–ò–ï –ü–£–õ–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô –° –ë–î
    db, err = pgxpool.New(context.Background(), connStr)
    if err != nil {
        log.Fatal("Failed to connect to database", err)  //!  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }
    defer db.Close()  //! –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã

    //!  –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î
    err = db.Ping(context.Background())
    if err != nil {
        log.Fatal("database ping failed", err)  //!  –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    }
    fmt.Println("register service connected to database!")  //! –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

    //!  –°–û–ó–î–ê–ù–ò–ï GIN ROUTER
    r := gin.Default()

    //!  CORS MIDDLEWARE (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
    r.Use(func(c *gin.Context){
        c.Header("Access-Control-Allow-Origin", "*")                    //!  –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –¥–æ–º–µ–Ω—ã
        c.Header("Access-Control-Allow-Methods", "GET, POST, OPTIONS")  //!  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        c.Header("Access-Control-Allow-Headers", "Content-Type")        //!  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

        if c.Request.Method == "OPTIONS" {  //!  –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π CORS –∑–∞–ø—Ä–æ—Å
            c.AbortWithStatus(204)          //!  –£—Å–ø–µ—à–Ω–æ, –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            return
        }
        c.Next()  //!  –ü–µ—Ä–µ–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    })

    //!  –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ú–ê–†–®–†–£–¢–û–í
    r.POST("/register", registerHandler)  //!  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    r.GET("/health", healthHandler)       //!  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞

    //!  –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–†–¢–ê –°–ï–†–í–ï–†–ê
    port := os.Getenv("PORT")
    if port == "" {  
        port = "8081" //!  –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    log.Printf("Register service running on port %s", port)
    r.Run(":" + port)  //!  –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
}

//!  –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
func registerHandler(c *gin.Context){
    var req RegisterRequest  //!  –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

    //!  –í–ê–õ–ò–î–ê–¶–ò–Ø –í–•–û–î–Ø–©–ò–• –î–ê–ù–ù–´–• (Gin binding)
    if err := c.ShouldBindJSON(&req); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{
            "error":   "Validation failed",
            "details": err.Error(),  //!  –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        })
        return
    }
	//!  –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø (–∫–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if err := validateRegistration(req); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{
            "error": err.Error(),
        })
        return
    }
    
    //!  –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –î–ê–ù–ù–´–• –í –ë–î
    if err := checkUniqueFields(req); err != nil {
        c.JSON(http.StatusConflict, gin.H{  //!  409 Conflict - –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            "error": err.Error(),
        })
        return
    }
    
    //!  –•–ï–®–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–û–õ–Ø
    hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{
            "error": "Failed to process password",
        })
        return
    }
    
    //! –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
    var userID int 
    err = db.QueryRow(context.Background(),
        `INSERT INTO users (phone, email, username, full_name, password_hash) 
         VALUES ($1, $2, $3, $4, $5) RETURNING id`, 
        req.Phone, req.Email, req.Username, req.FullName, string(hashedPassword),
    ).Scan(&userID)    
    if err != nil {
        log.Printf("Database error %v", err)
        c.JSON(http.StatusInternalServerError, gin.H{
            "error": "Failed to create user",
        })
        return
    }
    
    //!  –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢
    response := UserResponse{
        ID:       userID,
        Phone:    req.Phone,
        Email:    req.Email,
        Username: req.Username,
        FullName: req.FullName,
    }
    c.JSON(http.StatusCreated, gin.H{  //!  201 Created
        "message": "User registered successfully",
        "user":    response,
    })
}

//!  –§–£–ù–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–û–ù–ù–´–• –î–ê–ù–ù–´–•
func validateRegistration(req RegisterRequest) error{
    //!  –ü–†–û–í–ï–†–ö–ê –°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–ê–†–û–õ–ï–ô
    if req.Password != req.PasswordConfirm {
        return fmt.Errorf("password do not match")  //!  –û–®–ò–ë–ö–ê: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "do not" ‚Üí "do not"
    }

    //! üìû –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê (—Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
    phoneRegex := regexp.MustCompile(`^\+7\d{10}$`)
    if !phoneRegex.MatchString(req.Phone) {
        return fmt.Errorf("phone must be in format +7XXXXXXXXXX")
    }
    
    //!  –í–ê–õ–ò–î–ê–¶–ò–Ø USERNAME (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)
    usernameRegex := regexp.MustCompile(`^[a-zA-Z0-9_]+$`)
    if !usernameRegex.MatchString(req.Username) {
        return fmt.Errorf("username can only contain letters, numbers and underscores")
    }
    
    //!  –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    nameParts := strings.Split(strings.TrimSpace(req.FullName), " ")
    if len(nameParts) < 2 {
        return fmt.Errorf("full name must contain at least first and last name")
    }
    return nil
}

//!  –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ü–û–õ–ï–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
func checkUniqueFields(req RegisterRequest) error {
    var exists bool  //!  –õ–û–ö–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø: —Ñ–ª–∞–≥ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏

    //!  –ü–†–û–í–ï–†–ö–ê –¢–ï–õ–ï–§–û–ù–ê
    err := db.QueryRow(context.Background(),
        "SELECT EXISTS(SELECT 1 FROM users WHERE phone = $1)", 
        req.Phone).Scan(&exists)
    if err != nil {
        return fmt.Errorf("database error")
    }
    if exists {
        return fmt.Errorf("phone already registered")
    }
    
    //! –ü–†–û–í–ï–†–ö–ê –ü–û–ß–¢–´
    err = db.QueryRow(context.Background(),
        "SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)",
        req.Email).Scan(&exists)
    if err != nil {
        return fmt.Errorf("database error")
    }
    if exists {
        return fmt.Errorf("email already registered")
    }   
    
    //!  –ü–†–û–í–ï–†–ö–ê USERNAME
    err = db.QueryRow(context.Background(),
        "SELECT EXISTS(SELECT 1 FROM users WHERE username = $1)",
        req.Username).Scan(&exists)  //! üêõ –û–®–ò–ë–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å req.Username, –∞ –Ω–µ req.Email
    if err != nil {
        return fmt.Errorf("database error")
    }
    if exists {
        return fmt.Errorf("username already registered")
    }   
    return nil
}
//*  HANDLER –ü–†–û–í–ï–†–ö–ò –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ò–°–ê
func healthHandler(c *gin.Context){
    c.JSON(http.StatusOK, gin.H{
        "status":  "ok",
        "service": "register-service",
    })
}


//! üèóÔ∏è  –°–¢–†–£–ö–¢–£–†–´ (STRUCTS):
//? type Name struct { Field Type tag } - –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
//? binding:"required" - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ (Gin –≤–∞–ª–∏–¥–∞—Ü–∏—è)
//? json:"field" - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ JSON

//! üåê HTTP HANDLERS:
//? c.JSON(status, data) - –æ—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞
//? c.ShouldBindJSON() - –ø–∞—Ä—Å–∏–Ω–≥ JSON –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
//? http.StatusBadRequest - HTTP —Å—Ç–∞—Ç—É—Å 400

//! üóÑÔ∏è  –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•:
//? pgxpool.New() - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
//? db.QueryRow().Scan() - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
//? db.Ping() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î

//! üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
//? bcrypt.GenerateFromPassword() - —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
//? regexp.MustCompile() - –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π

//! ‚öôÔ∏è  MIDDLEWARE:
//? r.Use() - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
//? CORS - Cross-Origin Resource Sharing
//? c.Next() - –ø–µ—Ä–µ–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É

//! üè∑Ô∏è PACKAGE MAIN - –û–°–ù–û–í–ù–û–ô –ü–ê–ö–ï–¢:
//? package - –æ–±—ä—è–≤–ª—è–µ—Ç –ø–∞–∫–µ—Ç
//? main - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º

//! üì• IMPORT - –ò–ú–ü–û–†–¢ –ü–ê–ö–ï–¢–û–í:
//? import - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
//? () - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

//! üéØ –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ü–ê–ö–ï–¢–´:
//? "context" - Context (—Ç–∏–ø –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏)
//? "fmt" - Format (—Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞)
//? "log" - Log (—Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
//? "net/http" - HTTP (–ø—Ä–æ—Ç–æ–∫–æ–ª –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö)
//? "os" - Operating System (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –û–°)
//? "regexp" - Regular Expressions (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è)
//? "strings" - Strings (—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏)

//! üéØ –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–•:
//? var - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
//? db - –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
//? * - –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª—è
//? pgxpool.Pool - —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)

//! üè∑Ô∏è STRUCT - –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:
//? type - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
//? struct - —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
//? string - —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞
//? json:"..." - —Ç–µ–≥–∏ –¥–ª—è JSON –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞
//? binding:"..." - —Ç–µ–≥–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Gin

//! üéØ MAIN FUNCTION:
//? func - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
//? main() - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã

//! üîß ENVIRONMENT:
//? godotenv.Load() - —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞

//! üóÑÔ∏è DATABASE CONNECTION:
//? fmt.Sprintf() - —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
//? os.Getenv() - —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
//? pgxpool.New() - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
//? context.Background() - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
//? log.Fatal() - —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã—Ö–æ–¥–æ–º
//? defer - –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
//? db.Close() - –º–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
//? db.Ping() - –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

//! üåê GIN ROUTER:
//? gin.Default() - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —Å middleware –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
//? r.Use() - –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è middleware
//? gin.Context - —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞

//! üéØ CORS MIDDLEWARE:
//? c.Header() - –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞
//? c.Request.Method - –ø–æ–ª–µ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
//? c.AbortWithStatus() - –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Å—Ç–∞—Ç—É—Å–æ–º
//? c.Next() - –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É

//! üõ£Ô∏è ROUTES:
//? r.POST() - –º–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ POST –º–∞—Ä—à—Ä—É—Ç–∞
//? r.GET() - –º–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ GET –º–∞—Ä—à—Ä—É—Ç–∞
//? r.Run() - –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

//! üéØ HANDLER FUNCTION:
//? registerHandler - –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
//? c.ShouldBindJSON() - –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
//? c.JSON() - –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON –æ—Ç–≤–µ—Ç–∞
//? http.StatusBadRequest - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞

//! üîê PASSWORD HASHING:
//? bcrypt.GenerateFromPassword() - —Ñ—É–Ω–∫—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
//? []byte() - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç—ã
//? bcrypt.DefaultCost - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

//! üíæ DATABASE OPERATIONS:
//? db.QueryRow() - –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞
//? .Scan() - –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
//? context.Background() - –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

//! üéØ VALIDATION:
//? validateRegistration - —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
//? fmt.Errorf() - —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—à–∏–±–∫–∏
//? regexp.MustCompile() - –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
//? .MatchString() - –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–≥—É–ª—è—Ä–∫–µ
//? strings.Split() - —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
//? strings.TrimSpace() - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤
//? len() - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª–∏–Ω—ã

//! üîé UNIQUE CHECK:
//? checkUniqueFields - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
//? db.QueryRow() - SQL –∑–∞–ø—Ä–æ—Å
//? .Scan() - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
//? EXISTS() - SQL —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è

//! üéØ HEALTH HANDLER:
//? healthHandler - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
//? c.JSON() - –æ—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞
//? http.StatusOK - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ 200
//? gin.H{} - —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è map[string]interface{}

